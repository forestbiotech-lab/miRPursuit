%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.7
%%CreationDate: Fri Jul  3 12:34:54 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGGCGAAAGACUAAUUGAACCAUCUAGUAGCUGGUUUCCUCCGAAGUUUUAUAGGGUAAA\
) def
/coor [
[-53.15192795 302.41738892]
[-65.06267548 311.55349731]
[-77.77661896 319.53411865]
[-91.18201447 326.28909302]
[-105.16106415 331.75909424]
[-119.59090424 335.89599609]
[-134.34474182 338.66348267]
[-149.29289246 340.03723145]
[-164.30400085 340.00515747]
[-179.24613953 338.56753540]
[-193.98800659 335.73703003]
[-208.40003967 331.53848267]
[-222.35559082 326.00878906]
[-235.73199463 319.19659424]
[-248.41171265 311.16171265]
[-260.28329468 301.97479248]
[-271.24246216 291.71652222]
[-281.19284058 280.47711182]
[-290.04699707 268.35531616]
[-297.72714233 255.45764160]
[-304.16577148 241.89746094]
[-309.30630493 227.79393005]
[-313.10354614 213.27101135]
[-315.52413940 198.45631409]
[-316.54681396 183.48004150]
[-316.16259766 168.47381592]
[-314.37481689 153.56951904]
[-311.19924927 138.89811707]
[-306.66372681 124.58853912]
[-300.80819702 110.76657104]
[-293.68402100 97.55365753]
[-285.35391235 85.06593323]
[-275.89099121 73.41313171]
[-265.37844849 62.69766617]
[-253.90869141 53.01370621]
[-241.58250427 44.44635773]
[-228.50820923 37.07090759]
[-214.80070496 30.95217705]
[-200.58045959 26.14393806]
[-185.97245789 22.68844604]
[-171.10504150 20.61606979]
[-156.10890198 19.94502068]
[-141.11582947 20.68119812]
[-126.25756073 22.81812859]
[-111.66469574 26.33703613]
[-97.46546936 31.20699310]
[-83.78467560 37.38520432]
[-70.74253845 44.81736755]
[-58.45367050 53.43817520]
[-47.02608109 63.17186356]
[-36.56019211 73.93288422]
[-27.14797974 85.62667847]
[-18.87216377 98.15046692]
[-11.80547047 111.39419556]
[-6.01000595 125.24147034]
[8.30833149 120.77098846]
[22.62666893 116.30050659]
[36.94500732 111.83002472]
[51.26334381 107.35954285]
[65.58168030 102.88906097]
[68.74644470 85.29684448]
[80.28156281 71.64244843]
[97.09769440 65.58279419]
[114.69111633 68.74079132]
[128.34996033 80.27065277]
[142.22874451 74.58036041]
[156.10752869 68.89007568]
[169.98631287 63.19979095]
[183.86509705 57.50950241]
[197.74388123 51.81921387]
[207.57734680 39.42513275]
[222.28845215 41.75596619]
[236.16723633 36.06567764]
[248.52873230 24.46267509]
[263.10028076 33.12905121]
[258.80639648 49.53023529]
[241.85752869 49.94446182]
[227.97874451 55.63474655]
[219.13796997 67.62182617]
[203.43415833 65.69799805]
[189.55537415 71.38828278]
[175.67658997 77.07857513]
[161.79780579 82.76885986]
[147.91902161 88.45914459]
[134.04023743 94.14943695]
[133.99009705 106.13518524]
[129.84675598 117.38211823]
[122.10918427 126.53585052]
[111.70915985 132.49404907]
[99.89907074 134.53921509]
[88.10114288 132.42506409]
[77.73611450 126.40618134]
[70.05216217 117.20739746]
[55.73382568 121.67787933]
[41.41548920 126.14836121]
[27.09715080 130.61883545]
[12.77881432 135.08932495]
[-1.53952301 139.55981445]
[1.57333291 154.24464417]
[3.29738498 169.15646362]
[3.61748147 184.16419983]
[2.53080964 199.13595581]
[0.04691942 213.94017029]
[-3.81236029 228.44673157]
[-9.01311302 242.52816772]
[-15.50963402 256.06069946]
[-23.24483109 268.92544556]
[-32.15072250 281.00927734]
] def
/pairs [
[55 98]
[56 97]
[57 96]
[58 95]
[59 94]
[60 93]
[65 85]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[72 78]
[73 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
